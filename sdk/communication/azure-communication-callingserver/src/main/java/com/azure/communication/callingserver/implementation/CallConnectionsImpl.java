// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.AddParticipantRequest;
import com.azure.communication.callingserver.implementation.models.AddParticipantResultInternal;
import com.azure.communication.callingserver.implementation.models.CallConnectionPropertiesInternal;
import com.azure.communication.callingserver.implementation.models.CallParticipantInternal;
import com.azure.communication.callingserver.implementation.models.CancelAllMediaOperationsRequest;
import com.azure.communication.callingserver.implementation.models.CancelAllMediaOperationsResultInternal;
import com.azure.communication.callingserver.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.callingserver.implementation.models.CreateCallRequest;
import com.azure.communication.callingserver.implementation.models.CreateCallResultInternal;
import com.azure.communication.callingserver.implementation.models.GetParticipantByIdRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioRequest;
import com.azure.communication.callingserver.implementation.models.PlayAudioResultInternal;
import com.azure.communication.callingserver.implementation.models.RemoveParticipantByIdRequest;
import com.azure.communication.callingserver.implementation.models.StartHoldMusicRequest;
import com.azure.communication.callingserver.implementation.models.StartHoldMusicResultInternal;
import com.azure.communication.callingserver.implementation.models.StopHoldMusicResultInternal;
import com.azure.communication.callingserver.implementation.models.TransferCallRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import java.util.List;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CallConnections. */
public final class CallConnectionsImpl {
    /** The proxy service used to perform REST calls. */
    private final CallConnectionsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of CallConnectionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CallConnectionsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service =
                RestProxy.create(CallConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceCallConnections to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    private interface CallConnectionsService {
        @Post("/calling/callConnections")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CreateCallResultInternal>> createCall(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CreateCallRequest callRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/callConnections/{callConnectionId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallConnectionPropertiesInternal>> getCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/callConnections/{callConnectionId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> deleteCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:hangup")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> hangupCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> playAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioRequest request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:cancelAllMediaOperations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CancelAllMediaOperationsResultInternal>> cancelAllMediaOperations(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") CancelAllMediaOperationsRequest cancelAllMediaOperationRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:keepAlive")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> keepAlive(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/:transfer")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> transfer(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TransferCallRequest transferCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/callConnections/{callConnectionId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<List<CallParticipantInternal>>> getParticipants(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<AddParticipantResultInternal>> addParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AddParticipantRequest addParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants/:removeUser")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipantById(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") RemoveParticipantByIdRequest removeParticipantByIdRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants/:getUser")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<List<CallParticipantInternal>>> getParticipantById(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") GetParticipantByIdRequest getParticipantByIdRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/callConnections/{callConnectionId}/participants/{participantId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallParticipantInternal>> getParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/callConnections/{callConnectionId}/participants/{participantId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants/{participantId}/:startHoldMusic")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<StartHoldMusicResultInternal>> startHoldMusic(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") StartHoldMusicRequest request,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants/{participantId}/:stopHoldMusic")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<StopHoldMusicResultInternal>> stopHoldMusic(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/callConnections/{callConnectionId}/participants/{participantId}/:playAudio")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<PlayAudioResultInternal>> participantPlayAudio(
                @HostParam("endpoint") String endpoint,
                @PathParam("callConnectionId") String callConnectionId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") PlayAudioRequest request,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResultInternal>> createCallWithResponseAsync(CreateCallRequest callRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.createCall(
                                this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context));
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CreateCallResultInternal>> createCallWithResponseAsync(
            CreateCallRequest callRequest, Context context) {
        final String accept = "application/json";
        return service.createCall(this.client.getEndpoint(), this.client.getApiVersion(), callRequest, accept, context);
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResultInternal> createCallAsync(CreateCallRequest callRequest) {
        return createCallWithResponseAsync(callRequest)
                .flatMap(
                        (Response<CreateCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreateCallResultInternal> createCallAsync(CreateCallRequest callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context)
                .flatMap(
                        (Response<CreateCallResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateCallResultInternal createCall(CreateCallRequest callRequest) {
        return createCallAsync(callRequest).block();
    }

    /**
     * Create a new call.
     *
     * @param callRequest Create call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the create call operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CreateCallResultInternal> createCallWithResponse(CreateCallRequest callRequest, Context context) {
        return createCallWithResponseAsync(callRequest, context).block();
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(
            String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.getCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callConnectionId) {
        return getCallWithResponseAsync(callConnectionId)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callConnectionId, Context context) {
        return getCallWithResponseAsync(callConnectionId, context)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallConnectionPropertiesInternal getCall(String callConnectionId) {
        return getCallAsync(callConnectionId).block();
    }

    /**
     * Get call connection.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return call connection.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallConnectionPropertiesInternal> getCallWithResponse(String callConnectionId, Context context) {
        return getCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.deleteCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteCallWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.deleteCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callConnectionId) {
        return deleteCallWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteCallAsync(String callConnectionId, Context context) {
        return deleteCallWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteCall(String callConnectionId) {
        deleteCallAsync(callConnectionId).block();
    }

    /**
     * Delete the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteCallWithResponse(String callConnectionId, Context context) {
        return deleteCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.hangupCall(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangupCallWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.hangupCall(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callConnectionId) {
        return hangupCallWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangupCallAsync(String callConnectionId, Context context) {
        return hangupCallWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void hangupCall(String callConnectionId) {
        hangupCallAsync(callConnectionId).block();
    }

    /**
     * Hangup the call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> hangupCallWithResponse(String callConnectionId, Context context) {
        return hangupCallWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            String callConnectionId, PlayAudioRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.playAudio(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> playAudioWithResponseAsync(
            String callConnectionId, PlayAudioRequest request, Context context) {
        final String accept = "application/json";
        return service.playAudio(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), request, accept, context);
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(String callConnectionId, PlayAudioRequest request) {
        return playAudioWithResponseAsync(callConnectionId, request)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> playAudioAsync(
            String callConnectionId, PlayAudioRequest request, Context context) {
        return playAudioWithResponseAsync(callConnectionId, request, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal playAudio(String callConnectionId, PlayAudioRequest request) {
        return playAudioAsync(callConnectionId, request).block();
    }

    /**
     * Play audio in the call.
     *
     * @param callConnectionId The call connection id.
     * @param request Play audio request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> playAudioWithResponse(
            String callConnectionId, PlayAudioRequest request, Context context) {
        return playAudioWithResponseAsync(callConnectionId, request, context).block();
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CancelAllMediaOperationsResultInternal>> cancelAllMediaOperationsWithResponseAsync(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelAllMediaOperations(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                cancelAllMediaOperationRequest,
                                accept,
                                context));
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CancelAllMediaOperationsResultInternal>> cancelAllMediaOperationsWithResponseAsync(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest, Context context) {
        final String accept = "application/json";
        return service.cancelAllMediaOperations(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                cancelAllMediaOperationRequest,
                accept,
                context);
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CancelAllMediaOperationsResultInternal> cancelAllMediaOperationsAsync(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId, cancelAllMediaOperationRequest)
                .flatMap(
                        (Response<CancelAllMediaOperationsResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CancelAllMediaOperationsResultInternal> cancelAllMediaOperationsAsync(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId, cancelAllMediaOperationRequest, context)
                .flatMap(
                        (Response<CancelAllMediaOperationsResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CancelAllMediaOperationsResultInternal cancelAllMediaOperations(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest) {
        return cancelAllMediaOperationsAsync(callConnectionId, cancelAllMediaOperationRequest).block();
    }

    /**
     * Cancel all media operations.
     *
     * @param callConnectionId The call connection id.
     * @param cancelAllMediaOperationRequest The cancel all media operations context.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload of the cancel all media operations.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CancelAllMediaOperationsResultInternal> cancelAllMediaOperationsWithResponse(
            String callConnectionId, CancelAllMediaOperationsRequest cancelAllMediaOperationRequest, Context context) {
        return cancelAllMediaOperationsWithResponseAsync(callConnectionId, cancelAllMediaOperationRequest, context)
                .block();
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> keepAliveWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.keepAlive(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> keepAliveWithResponseAsync(String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.keepAlive(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> keepAliveAsync(String callConnectionId) {
        return keepAliveWithResponseAsync(callConnectionId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> keepAliveAsync(String callConnectionId, Context context) {
        return keepAliveWithResponseAsync(callConnectionId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void keepAlive(String callConnectionId) {
        keepAliveAsync(callConnectionId).block();
    }

    /**
     * Keep the call alive.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> keepAliveWithResponse(String callConnectionId, Context context) {
        return keepAliveWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> transferWithResponseAsync(
            String callConnectionId, TransferCallRequest transferCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.transfer(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                transferCallRequest,
                                accept,
                                context));
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> transferWithResponseAsync(
            String callConnectionId, TransferCallRequest transferCallRequest, Context context) {
        final String accept = "application/json";
        return service.transfer(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                transferCallRequest,
                accept,
                context);
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> transferAsync(String callConnectionId, TransferCallRequest transferCallRequest) {
        return transferWithResponseAsync(callConnectionId, transferCallRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> transferAsync(String callConnectionId, TransferCallRequest transferCallRequest, Context context) {
        return transferWithResponseAsync(callConnectionId, transferCallRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void transfer(String callConnectionId, TransferCallRequest transferCallRequest) {
        transferAsync(callConnectionId, transferCallRequest).block();
    }

    /**
     * Transfer the call to a participant or to another call.
     *
     * @param callConnectionId The call connection id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> transferWithResponse(
            String callConnectionId, TransferCallRequest transferCallRequest, Context context) {
        return transferWithResponseAsync(callConnectionId, transferCallRequest, context).block();
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(String callConnectionId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipants(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantsWithResponseAsync(
            String callConnectionId, Context context) {
        final String accept = "application/json";
        return service.getParticipants(
                this.client.getEndpoint(), callConnectionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(String callConnectionId) {
        return getParticipantsWithResponseAsync(callConnectionId)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantsAsync(String callConnectionId, Context context) {
        return getParticipantsWithResponseAsync(callConnectionId, context)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CallParticipantInternal> getParticipants(String callConnectionId) {
        return getParticipantsAsync(callConnectionId).block();
    }

    /**
     * Get participants from a call.
     *
     * @param callConnectionId The call connection id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CallParticipantInternal>> getParticipantsWithResponse(
            String callConnectionId, Context context) {
        return getParticipantsWithResponseAsync(callConnectionId, context).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                addParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AddParticipantResultInternal>> addParticipantWithResponseAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.addParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                addParticipantRequest,
                accept,
                context);
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddParticipantResultInternal> addParticipantAsync(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest, context)
                .flatMap(
                        (Response<AddParticipantResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AddParticipantResultInternal addParticipant(
            String callConnectionId, AddParticipantRequest addParticipantRequest) {
        return addParticipantAsync(callConnectionId, addParticipantRequest).block();
    }

    /**
     * Add a participant to the call.
     *
     * @param callConnectionId The call connection id.
     * @param addParticipantRequest Add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the add participant result.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AddParticipantResultInternal> addParticipantWithResponse(
            String callConnectionId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callConnectionId, addParticipantRequest, context).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantByIdWithResponseAsync(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipantById(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                removeParticipantByIdRequest,
                                accept,
                                context));
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantByIdWithResponseAsync(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest, Context context) {
        final String accept = "application/json";
        return service.removeParticipantById(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                removeParticipantByIdRequest,
                accept,
                context);
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantByIdAsync(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest) {
        return removeParticipantByIdWithResponseAsync(callConnectionId, removeParticipantByIdRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantByIdAsync(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest, Context context) {
        return removeParticipantByIdWithResponseAsync(callConnectionId, removeParticipantByIdRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipantById(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest) {
        removeParticipantByIdAsync(callConnectionId, removeParticipantByIdRequest).block();
    }

    /**
     * Remove participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param removeParticipantByIdRequest The identifier of the participant to be removed from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantByIdWithResponse(
            String callConnectionId, RemoveParticipantByIdRequest removeParticipantByIdRequest, Context context) {
        return removeParticipantByIdWithResponseAsync(callConnectionId, removeParticipantByIdRequest, context).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantByIdWithResponseAsync(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipantById(
                                this.client.getEndpoint(),
                                callConnectionId,
                                this.client.getApiVersion(),
                                getParticipantByIdRequest,
                                accept,
                                context));
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<List<CallParticipantInternal>>> getParticipantByIdWithResponseAsync(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest, Context context) {
        final String accept = "application/json";
        return service.getParticipantById(
                this.client.getEndpoint(),
                callConnectionId,
                this.client.getApiVersion(),
                getParticipantByIdRequest,
                accept,
                context);
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantByIdAsync(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest) {
        return getParticipantByIdWithResponseAsync(callConnectionId, getParticipantByIdRequest)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<CallParticipantInternal>> getParticipantByIdAsync(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest, Context context) {
        return getParticipantByIdWithResponseAsync(callConnectionId, getParticipantByIdRequest, context)
                .flatMap(
                        (Response<List<CallParticipantInternal>> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<CallParticipantInternal> getParticipantById(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest) {
        return getParticipantByIdAsync(callConnectionId, getParticipantByIdRequest).block();
    }

    /**
     * Get participant from the call using identifier.
     *
     * @param callConnectionId The call connection id.
     * @param getParticipantByIdRequest The identifier of the participant to get from the call.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant from the call using identifier.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<CallParticipantInternal>> getParticipantByIdWithResponse(
            String callConnectionId, GetParticipantByIdRequest getParticipantByIdRequest, Context context) {
        return getParticipantByIdWithResponseAsync(callConnectionId, getParticipantByIdRequest, context).block();
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callConnectionId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callConnectionId, String participantId, Context context) {
        final String accept = "application/json";
        return service.getParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                participantId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(String callConnectionId, String participantId) {
        return getParticipantWithResponseAsync(callConnectionId, participantId)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(
            String callConnectionId, String participantId, Context context) {
        return getParticipantWithResponseAsync(callConnectionId, participantId, context)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallParticipantInternal getParticipant(String callConnectionId, String participantId) {
        return getParticipantAsync(callConnectionId, participantId).block();
    }

    /**
     * Get participant by participant id from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return participant by participant id from the call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallParticipantInternal> getParticipantWithResponse(
            String callConnectionId, String participantId, Context context) {
        return getParticipantWithResponseAsync(callConnectionId, participantId, context).block();
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(String callConnectionId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                callConnectionId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String callConnectionId, String participantId, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(),
                callConnectionId,
                participantId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callConnectionId, String participantId) {
        return removeParticipantWithResponseAsync(callConnectionId, participantId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callConnectionId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callConnectionId, participantId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(String callConnectionId, String participantId) {
        removeParticipantAsync(callConnectionId, participantId).block();
    }

    /**
     * Remove a participant from the call.
     *
     * @param callConnectionId The call connection id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(
            String callConnectionId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callConnectionId, participantId, context).block();
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartHoldMusicResultInternal>> startHoldMusicWithResponseAsync(
            String callConnectionId, String participantId, StartHoldMusicRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.startHoldMusic(
                                this.client.getEndpoint(),
                                callConnectionId,
                                participantId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StartHoldMusicResultInternal>> startHoldMusicWithResponseAsync(
            String callConnectionId, String participantId, StartHoldMusicRequest request, Context context) {
        final String accept = "application/json";
        return service.startHoldMusic(
                this.client.getEndpoint(),
                callConnectionId,
                participantId,
                this.client.getApiVersion(),
                request,
                accept,
                context);
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartHoldMusicResultInternal> startHoldMusicAsync(
            String callConnectionId, String participantId, StartHoldMusicRequest request) {
        return startHoldMusicWithResponseAsync(callConnectionId, participantId, request)
                .flatMap(
                        (Response<StartHoldMusicResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StartHoldMusicResultInternal> startHoldMusicAsync(
            String callConnectionId, String participantId, StartHoldMusicRequest request, Context context) {
        return startHoldMusicWithResponseAsync(callConnectionId, participantId, request, context)
                .flatMap(
                        (Response<StartHoldMusicResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StartHoldMusicResultInternal startHoldMusic(
            String callConnectionId, String participantId, StartHoldMusicRequest request) {
        return startHoldMusicAsync(callConnectionId, participantId, request).block();
    }

    /**
     * Play hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param request The start hold music request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StartHoldMusicResultInternal> startHoldMusicWithResponse(
            String callConnectionId, String participantId, StartHoldMusicRequest request, Context context) {
        return startHoldMusicWithResponseAsync(callConnectionId, participantId, request, context).block();
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StopHoldMusicResultInternal>> stopHoldMusicWithResponseAsync(
            String callConnectionId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.stopHoldMusic(
                                this.client.getEndpoint(),
                                callConnectionId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<StopHoldMusicResultInternal>> stopHoldMusicWithResponseAsync(
            String callConnectionId, String participantId, Context context) {
        final String accept = "application/json";
        return service.stopHoldMusic(
                this.client.getEndpoint(),
                callConnectionId,
                participantId,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StopHoldMusicResultInternal> stopHoldMusicAsync(String callConnectionId, String participantId) {
        return stopHoldMusicWithResponseAsync(callConnectionId, participantId)
                .flatMap(
                        (Response<StopHoldMusicResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StopHoldMusicResultInternal> stopHoldMusicAsync(
            String callConnectionId, String participantId, Context context) {
        return stopHoldMusicWithResponseAsync(callConnectionId, participantId, context)
                .flatMap(
                        (Response<StopHoldMusicResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StopHoldMusicResultInternal stopHoldMusic(String callConnectionId, String participantId) {
        return stopHoldMusicAsync(callConnectionId, participantId).block();
    }

    /**
     * Stop hold music to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for start hold music operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StopHoldMusicResultInternal> stopHoldMusicWithResponse(
            String callConnectionId, String participantId, Context context) {
        return stopHoldMusicWithResponseAsync(callConnectionId, participantId, context).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            String callConnectionId, String participantId, PlayAudioRequest request) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.participantPlayAudio(
                                this.client.getEndpoint(),
                                callConnectionId,
                                participantId,
                                this.client.getApiVersion(),
                                request,
                                accept,
                                context));
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PlayAudioResultInternal>> participantPlayAudioWithResponseAsync(
            String callConnectionId, String participantId, PlayAudioRequest request, Context context) {
        final String accept = "application/json";
        return service.participantPlayAudio(
                this.client.getEndpoint(),
                callConnectionId,
                participantId,
                this.client.getApiVersion(),
                request,
                accept,
                context);
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            String callConnectionId, String participantId, PlayAudioRequest request) {
        return participantPlayAudioWithResponseAsync(callConnectionId, participantId, request)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PlayAudioResultInternal> participantPlayAudioAsync(
            String callConnectionId, String participantId, PlayAudioRequest request, Context context) {
        return participantPlayAudioWithResponseAsync(callConnectionId, participantId, request, context)
                .flatMap(
                        (Response<PlayAudioResultInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PlayAudioResultInternal participantPlayAudio(
            String callConnectionId, String participantId, PlayAudioRequest request) {
        return participantPlayAudioAsync(callConnectionId, participantId, request).block();
    }

    /**
     * Play audio to a participant.
     *
     * @param callConnectionId The callConnectionId.
     * @param participantId Participant id.
     * @param request PlayAudioRequest body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response payload for play audio operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PlayAudioResultInternal> participantPlayAudioWithResponse(
            String callConnectionId, String participantId, PlayAudioRequest request, Context context) {
        return participantPlayAudioWithResponseAsync(callConnectionId, participantId, request, context).block();
    }
}
