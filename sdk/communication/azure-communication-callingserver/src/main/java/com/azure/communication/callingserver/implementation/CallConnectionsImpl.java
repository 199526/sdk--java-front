// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.communication.callingserver.implementation;

import com.azure.communication.callingserver.implementation.models.AddParticipantRequest;
import com.azure.communication.callingserver.implementation.models.CallConnectionPropertiesInternal;
import com.azure.communication.callingserver.implementation.models.CallParticipantCollection;
import com.azure.communication.callingserver.implementation.models.CallParticipantInternal;
import com.azure.communication.callingserver.implementation.models.CommunicationErrorResponseException;
import com.azure.communication.callingserver.implementation.models.TerminateCallRequest;
import com.azure.communication.callingserver.implementation.models.TransferCallRequest;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CallConnections. */
public final class CallConnectionsImpl {
    /** The proxy service used to perform REST calls. */
    private final CallConnectionsService service;

    /** The service client containing this operation class. */
    private final AzureCommunicationCallingServerServiceImpl client;

    /**
     * Initializes an instance of CallConnectionsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CallConnectionsImpl(AzureCommunicationCallingServerServiceImpl client) {
        this.service =
                RestProxy.create(CallConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureCommunicationCallingServerServiceCallConnections to be used by
     * the proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AzureCommunicationCa")
    public interface CallConnectionsService {
        @Get("/calling/{callLegId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallConnectionPropertiesInternal>> getCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/{callLegId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> hangUpCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/{callLegId}:terminate")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> terminateCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TerminateCallRequest terminateCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/{callLegId}:transfer")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> transferCall(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") TransferCallRequest transferCallRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/{callLegId}/participants")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallParticipantCollection>> listParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("maxPageSize") Integer maxPageSize,
                @QueryParam("continuationToken") String continuationToken,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Post("/calling/{callLegId}/participants")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> addParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @QueryParam("api-version") String apiVersion,
                @BodyParam("application/json") AddParticipantRequest addParticipantRequest,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("/calling/{callLegId}/participants/{participantId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallParticipantInternal>> getParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Delete("/calling/{callLegId}/participants/{participantId}")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<Void>> removeParticipant(
                @HostParam("endpoint") String endpoint,
                @PathParam("callLegId") String callLegId,
                @PathParam("participantId") String participantId,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("Accept") String accept,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = CommunicationErrorResponseException.class,
                code = {400, 401, 403, 404, 500})
        @UnexpectedResponseExceptionType(CommunicationErrorResponseException.class)
        Mono<Response<CallParticipantCollection>> listParticipantNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("endpoint") String endpoint,
                @HeaderParam("Accept") String accept,
                Context context);
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(String callLegId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getCall(
                                this.client.getEndpoint(), callLegId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallConnectionPropertiesInternal>> getCallWithResponseAsync(
            String callLegId, Context context) {
        final String accept = "application/json";
        return service.getCall(this.client.getEndpoint(), callLegId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callLegId) {
        return getCallWithResponseAsync(callLegId)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallConnectionPropertiesInternal> getCallAsync(String callLegId, Context context) {
        return getCallWithResponseAsync(callLegId, context)
                .flatMap(
                        (Response<CallConnectionPropertiesInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallConnectionPropertiesInternal getCall(String callLegId) {
        return getCallAsync(callLegId).block();
    }

    /**
     * Get information of an existing call.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of an existing call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallConnectionPropertiesInternal> getCallWithResponse(String callLegId, Context context) {
        return getCallWithResponseAsync(callLegId, context).block();
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangUpCallWithResponseAsync(String callLegId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.hangUpCall(
                                this.client.getEndpoint(), callLegId, this.client.getApiVersion(), accept, context));
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> hangUpCallWithResponseAsync(String callLegId, Context context) {
        final String accept = "application/json";
        return service.hangUpCall(this.client.getEndpoint(), callLegId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangUpCallAsync(String callLegId) {
        return hangUpCallWithResponseAsync(callLegId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> hangUpCallAsync(String callLegId, Context context) {
        return hangUpCallWithResponseAsync(callLegId, context).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void hangUpCall(String callLegId) {
        hangUpCallAsync(callLegId).block();
    }

    /**
     * Hangup a call using call leg id.
     *
     * @param callLegId The call leg id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> hangUpCallWithResponse(String callLegId, Context context) {
        return hangUpCallWithResponseAsync(callLegId, context).block();
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> terminateCallWithResponseAsync(
            String callLegId, TerminateCallRequest terminateCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.terminateCall(
                                this.client.getEndpoint(),
                                callLegId,
                                this.client.getApiVersion(),
                                terminateCallRequest,
                                accept,
                                context));
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> terminateCallWithResponseAsync(
            String callLegId, TerminateCallRequest terminateCallRequest, Context context) {
        final String accept = "application/json";
        return service.terminateCall(
                this.client.getEndpoint(),
                callLegId,
                this.client.getApiVersion(),
                terminateCallRequest,
                accept,
                context);
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> terminateCallAsync(String callLegId, TerminateCallRequest terminateCallRequest) {
        return terminateCallWithResponseAsync(callLegId, terminateCallRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> terminateCallAsync(String callLegId, TerminateCallRequest terminateCallRequest, Context context) {
        return terminateCallWithResponseAsync(callLegId, terminateCallRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void terminateCall(String callLegId, TerminateCallRequest terminateCallRequest) {
        terminateCallAsync(callLegId, terminateCallRequest).block();
    }

    /**
     * Terminate a call, hanging up all participants in the call.
     *
     * @param callLegId The call leg id.
     * @param terminateCallRequest The terminate call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> terminateCallWithResponse(
            String callLegId, TerminateCallRequest terminateCallRequest, Context context) {
        return terminateCallWithResponseAsync(callLegId, terminateCallRequest, context).block();
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> transferCallWithResponseAsync(
            String callLegId, TransferCallRequest transferCallRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.transferCall(
                                this.client.getEndpoint(),
                                callLegId,
                                this.client.getApiVersion(),
                                transferCallRequest,
                                accept,
                                context));
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> transferCallWithResponseAsync(
            String callLegId, TransferCallRequest transferCallRequest, Context context) {
        final String accept = "application/json";
        return service.transferCall(
                this.client.getEndpoint(),
                callLegId,
                this.client.getApiVersion(),
                transferCallRequest,
                accept,
                context);
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> transferCallAsync(String callLegId, TransferCallRequest transferCallRequest) {
        return transferCallWithResponseAsync(callLegId, transferCallRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> transferCallAsync(String callLegId, TransferCallRequest transferCallRequest, Context context) {
        return transferCallWithResponseAsync(callLegId, transferCallRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void transferCall(String callLegId, TransferCallRequest transferCallRequest) {
        transferCallAsync(callLegId, transferCallRequest).block();
    }

    /**
     * Transfer a participant to different call.
     *
     * @param callLegId The call leg id.
     * @param transferCallRequest The transfer call request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> transferCallWithResponse(
            String callLegId, TransferCallRequest transferCallRequest, Context context) {
        return transferCallWithResponseAsync(callLegId, transferCallRequest, context).block();
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CallParticipantInternal>> listParticipantSinglePageAsync(
            String callLegId, Integer maxPageSize, String continuationToken) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listParticipant(
                                        this.client.getEndpoint(),
                                        callLegId,
                                        maxPageSize,
                                        continuationToken,
                                        this.client.getApiVersion(),
                                        accept,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CallParticipantInternal>> listParticipantSinglePageAsync(
            String callLegId, Integer maxPageSize, String continuationToken, Context context) {
        final String accept = "application/json";
        return service.listParticipant(
                        this.client.getEndpoint(),
                        callLegId,
                        maxPageSize,
                        continuationToken,
                        this.client.getApiVersion(),
                        accept,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CallParticipantInternal> listParticipantAsync(
            String callLegId, Integer maxPageSize, String continuationToken) {
        return new PagedFlux<>(
                () -> listParticipantSinglePageAsync(callLegId, maxPageSize, continuationToken),
                nextLink -> listParticipantNextSinglePageAsync(nextLink));
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<CallParticipantInternal> listParticipantAsync(
            String callLegId, Integer maxPageSize, String continuationToken, Context context) {
        return new PagedFlux<>(
                () -> listParticipantSinglePageAsync(callLegId, maxPageSize, continuationToken, context),
                nextLink -> listParticipantNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CallParticipantInternal> listParticipant(
            String callLegId, Integer maxPageSize, String continuationToken) {
        return new PagedIterable<>(listParticipantAsync(callLegId, maxPageSize, continuationToken));
    }

    /**
     * Get information of all participants from a call.
     *
     * @param callLegId The call leg id.
     * @param maxPageSize Number of objects to return per page.
     * @param continuationToken Token for pagination.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of all participants from a call.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CallParticipantInternal> listParticipant(
            String callLegId, Integer maxPageSize, String continuationToken, Context context) {
        return new PagedIterable<>(listParticipantAsync(callLegId, maxPageSize, continuationToken, context));
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addParticipantWithResponseAsync(
            String callLegId, AddParticipantRequest addParticipantRequest) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.addParticipant(
                                this.client.getEndpoint(),
                                callLegId,
                                this.client.getApiVersion(),
                                addParticipantRequest,
                                accept,
                                context));
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addParticipantWithResponseAsync(
            String callLegId, AddParticipantRequest addParticipantRequest, Context context) {
        final String accept = "application/json";
        return service.addParticipant(
                this.client.getEndpoint(),
                callLegId,
                this.client.getApiVersion(),
                addParticipantRequest,
                accept,
                context);
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addParticipantAsync(String callLegId, AddParticipantRequest addParticipantRequest) {
        return addParticipantWithResponseAsync(callLegId, addParticipantRequest)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addParticipantAsync(
            String callLegId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callLegId, addParticipantRequest, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addParticipant(String callLegId, AddParticipantRequest addParticipantRequest) {
        addParticipantAsync(callLegId, addParticipantRequest).block();
    }

    /**
     * Add a new participant to a call.
     *
     * @param callLegId The call leg id.
     * @param addParticipantRequest The add participant request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> addParticipantWithResponse(
            String callLegId, AddParticipantRequest addParticipantRequest, Context context) {
        return addParticipantWithResponseAsync(callLegId, addParticipantRequest, context).block();
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callLegId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.getParticipant(
                                this.client.getEndpoint(),
                                callLegId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<CallParticipantInternal>> getParticipantWithResponseAsync(
            String callLegId, String participantId, Context context) {
        final String accept = "application/json";
        return service.getParticipant(
                this.client.getEndpoint(), callLegId, participantId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(String callLegId, String participantId) {
        return getParticipantWithResponseAsync(callLegId, participantId)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CallParticipantInternal> getParticipantAsync(String callLegId, String participantId, Context context) {
        return getParticipantWithResponseAsync(callLegId, participantId, context)
                .flatMap(
                        (Response<CallParticipantInternal> res) -> {
                            if (res.getValue() != null) {
                                return Mono.just(res.getValue());
                            } else {
                                return Mono.empty();
                            }
                        });
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CallParticipantInternal getParticipant(String callLegId, String participantId) {
        return getParticipantAsync(callLegId, participantId).block();
    }

    /**
     * Get information of participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return information of participant from a call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CallParticipantInternal> getParticipantWithResponse(
            String callLegId, String participantId, Context context) {
        return getParticipantWithResponseAsync(callLegId, participantId, context).block();
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(String callLegId, String participantId) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.removeParticipant(
                                this.client.getEndpoint(),
                                callLegId,
                                participantId,
                                this.client.getApiVersion(),
                                accept,
                                context));
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeParticipantWithResponseAsync(
            String callLegId, String participantId, Context context) {
        final String accept = "application/json";
        return service.removeParticipant(
                this.client.getEndpoint(), callLegId, participantId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callLegId, String participantId) {
        return removeParticipantWithResponseAsync(callLegId, participantId)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeParticipantAsync(String callLegId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callLegId, participantId, context)
                .flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeParticipant(String callLegId, String participantId) {
        removeParticipantAsync(callLegId, participantId).block();
    }

    /**
     * Remove a participant from a call.
     *
     * @param callLegId The call leg id.
     * @param participantId The participant id.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> removeParticipantWithResponse(String callLegId, String participantId, Context context) {
        return removeParticipantWithResponseAsync(callLegId, participantId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of participants.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CallParticipantInternal>> listParticipantNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context -> service.listParticipantNext(nextLink, this.client.getEndpoint(), accept, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server.
     * @throws CommunicationErrorResponseException thrown if the request is rejected by server on status code 400, 401,
     *     403, 404, 500.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged collection of participants.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<CallParticipantInternal>> listParticipantNextSinglePageAsync(
            String nextLink, Context context) {
        final String accept = "application/json";
        return service.listParticipantNext(nextLink, this.client.getEndpoint(), accept, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        res.getValue().getValue(),
                                        res.getValue().getNextLink(),
                                        null));
    }
}
