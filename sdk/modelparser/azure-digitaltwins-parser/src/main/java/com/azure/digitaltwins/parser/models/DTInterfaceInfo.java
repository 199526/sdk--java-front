// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.digitaltwins.parser.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Set;
import java.util.regex.Pattern;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.azure.digitaltwins.parser.ContextHistory;
import com.azure.digitaltwins.parser.VersionedContext;
import com.azure.digitaltwins.parser.Dtmi;

/**
 * Class {@link DTInterfaceInfo} corresponds to an element of type Interface in a DTDL model.
 */
public class DTInterfaceInfo extends DTEntityInfo implements TypeChecker, PropertyValueConstrainer, PropertyInstanceBinder, Equatable<DTInterfaceInfo> {
    private static final Map<Integer, String> BAD_TYPE_ACTION_FORMAT = new HashMap<>();

    private static final Map<Integer, String> BAD_TYPE_CAUSE_FORMAT = new HashMap<>();

    private static final Map<Integer, Set<DTEntityKind>> CONCRETE_KINDS = new HashMap<>();

    private static final HashSet<String> VERSION_LESS_TYPES = new HashSet<>();

    private Map<String, DTContentInfo> contents;

    private Set<Integer> contentsAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> contentsAllowedVersionsV3 = new HashSet<>(Arrays.asList(3, 2));

    private List<String> contentsInstanceProperties = null;

    private List<ValueConstraints> contentsValueConstraints = null;

    private List<DTInterfaceInfo> extends;

    private Set<Integer> extendsAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> extendsAllowedVersionsV3 = new HashSet<>(Arrays.asList(3, 2));

    private List<String> extendsInstanceProperties = null;

    private List<ValueConstraints> extendsValueConstraints = null;

    private List<DTComplexSchemaInfo> schemas;

    private Set<Integer> schemasAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> schemasAllowedVersionsV3 = new HashSet<>(Arrays.asList(3));

    private List<String> schemasInstanceProperties = null;

    private List<ValueConstraints> schemasValueConstraints = null;

    static {
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Entity");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Interface");

        CONCRETE_KINDS.put(2, new HashSet<>());
        CONCRETE_KINDS.get(2).add(DTEntityKind.INTERFACE);

        CONCRETE_KINDS.put(3, new HashSet<>());
        CONCRETE_KINDS.get(3).add(DTEntityKind.INTERFACE);

        BAD_TYPE_ACTION_FORMAT.put(2, "Provide a value for property '{property}' with @type Interface.");
        BAD_TYPE_ACTION_FORMAT.put(3, "Provide a value for property '{property}' with @type Interface.");

        BAD_TYPE_CAUSE_FORMAT.put(2, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Interface.");
        BAD_TYPE_CAUSE_FORMAT.put(3, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Interface.");
    }

    /**
     * Get The value of the 'contents' property of the DTDL element that corresponds to this object.
     * @return contents.
     */
    public Map<String, DTContentInfo> getContents() {
        return this.contents
    }

    /**
     * Get The value of the 'extends' property of the DTDL element that corresponds to this object.
     * @return extends.
     */
    public List<DTInterfaceInfo> getExtends() {
        return this.extends
    }

    /**
     * Get The value of the 'schemas' property of the DTDL element that corresponds to this object.
     * @return schemas.
     */
    public List<DTComplexSchemaInfo> getSchemas() {
        return this.schemas
    }

    /**
     * Set The value of the 'contents' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setContents(Map<String, DTContentInfo> value) {
        this.contents = value;
    }

    /**
     * Set The value of the 'extends' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setExtends(List<DTInterfaceInfo> value) {
        this.extends = value;
    }

    /**
     * Set The value of the 'schemas' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setSchemas(List<DTComplexSchemaInfo> value) {
        this.schemas = value;
    }
}
