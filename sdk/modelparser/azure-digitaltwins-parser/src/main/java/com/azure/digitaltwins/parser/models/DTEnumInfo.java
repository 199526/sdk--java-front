// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.digitaltwins.parser.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Set;
import java.util.regex.Pattern;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.azure.digitaltwins.parser.ContextHistory;
import com.azure.digitaltwins.parser.VersionedContext;
import com.azure.digitaltwins.parser.Dtmi;

/**
 * Class {@link DTEnumInfo} corresponds to an element of type Enum in a DTDL model.
 */
public class DTEnumInfo extends DTComplexSchemaInfo implements TypeChecker, PropertyValueConstrainer, PropertyInstanceBinder, Equatable<DTEnumInfo> {
    private static final Map<Integer, String> BAD_TYPE_ACTION_FORMAT = new HashMap<>();

    private static final Map<Integer, String> BAD_TYPE_CAUSE_FORMAT = new HashMap<>();

    private static final Map<Integer, Set<DTEntityKind>> CONCRETE_KINDS = new HashMap<>();

    private static final HashSet<String> VERSION_LESS_TYPES = new HashSet<>();

    private List<DTEnumValueInfo> enumValues;

    private Set<Integer> enumValuesAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> enumValuesAllowedVersionsV3 = new HashSet<>(Arrays.asList(3));

    private List<String> enumValuesInstanceProperties = null;

    private List<ValueConstraints> enumValuesValueConstraints = null;

    private DTPrimitiveSchemaInfo valueSchema;

    private Set<Integer> valueSchemaAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> valueSchemaAllowedVersionsV3 = new HashSet<>(Arrays.asList(3));

    private List<String> valueSchemaInstanceProperties = null;

    private List<ValueConstraints> valueSchemaValueConstraints = null;

    static {
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:ComplexSchema");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Entity");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Enum");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Schema");

        CONCRETE_KINDS.put(2, new HashSet<>());
        CONCRETE_KINDS.get(2).add(DTEntityKind.ENUM);

        CONCRETE_KINDS.put(3, new HashSet<>());
        CONCRETE_KINDS.get(3).add(DTEntityKind.ENUM);

        BAD_TYPE_ACTION_FORMAT.put(2, "Provide a value for property '{property}' with @type Enum.");
        BAD_TYPE_ACTION_FORMAT.put(3, "Provide a value for property '{property}' with @type Enum.");

        BAD_TYPE_CAUSE_FORMAT.put(2, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Enum.");
        BAD_TYPE_CAUSE_FORMAT.put(3, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Enum.");
    }

    /**
     * Get The value of the 'enumValues' property of the DTDL element that corresponds to this object.
     * @return enumValues.
     */
    public List<DTEnumValueInfo> getEnumValues() {
        return this.enumValues
    }

    /**
     * Get The value of the 'valueSchema' property of the DTDL element that corresponds to this object.
     * @return valueSchema.
     */
    public DTPrimitiveSchemaInfo getValueSchema() {
        return this.valueSchema
    }

    /**
     * Set The value of the 'enumValues' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setEnumValues(List<DTEnumValueInfo> value) {
        this.enumValues = value;
    }

    /**
     * Set The value of the 'valueSchema' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setValueSchema(DTPrimitiveSchemaInfo value) {
        this.valueSchema = value;
    }
}
