// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.digitaltwins.parser.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Set;
import java.util.regex.Pattern;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.azure.digitaltwins.parser.ContextHistory;
import com.azure.digitaltwins.parser.VersionedContext;
import com.azure.digitaltwins.parser.Dtmi;

/**
 * Class {@link DTPropertyInfo} corresponds to an element of type Property in a DTDL model.
 */
public class DTPropertyInfo extends DTContentInfo implements TypeChecker, PropertyValueConstrainer, PropertyInstanceBinder, Equatable<DTPropertyInfo> {
    private static final Map<Integer, String> BAD_TYPE_ACTION_FORMAT = new HashMap<>();

    private static final Map<Integer, String> BAD_TYPE_CAUSE_FORMAT = new HashMap<>();

    private static final Map<Integer, Set<DTEntityKind>> CONCRETE_KINDS = new HashMap<>();

    private static final HashSet<String> VERSION_LESS_TYPES = new HashSet<>();

    private DTSchemaInfo schema;

    private Set<Integer> schemaAllowedVersionsV2 = new HashSet<>(Arrays.asList(2));

    private Set<Integer> schemaAllowedVersionsV3 = new HashSet<>(Arrays.asList(3, 2));

    private List<String> schemaInstanceProperties = null;

    private List<ValueConstraints> schemaValueConstraints = null;

    private Boolean writable;

    static {
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Content");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Entity");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:NamedEntity");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Property");

        CONCRETE_KINDS.put(2, new HashSet<>());
        CONCRETE_KINDS.get(2).add(DTEntityKind.PROPERTY);

        CONCRETE_KINDS.put(3, new HashSet<>());
        CONCRETE_KINDS.get(3).add(DTEntityKind.PROPERTY);

        BAD_TYPE_ACTION_FORMAT.put(2, "Provide a value for property '{property}' with @type Property.");
        BAD_TYPE_ACTION_FORMAT.put(3, "Provide a value for property '{property}' with @type Property.");

        BAD_TYPE_CAUSE_FORMAT.put(2, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Property.");
        BAD_TYPE_CAUSE_FORMAT.put(3, "{primaryId:p} property '{property}' has value{secondaryId:e} that does not have @type of Property.");
    }

    /**
     * Get The value of the 'schema' property of the DTDL element that corresponds to this object.
     * @return schema.
     */
    public DTSchemaInfo getSchema() {
        return this.schema
    }

    /**
     * Get The value of the 'writable' property of the DTDL element that corresponds to this object.
     * @return writable.
     */
    public Boolean getWritable() {
        return this.writable
    }

    /**
     * Set The value of the 'schema' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setSchema(DTSchemaInfo value) {
        this.schema = value;
    }

    /**
     * Set The value of the 'writable' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setWritable(Boolean value) {
        this.writable = value;
    }
}
