// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) Code Generator

package com.azure.digitaltwins.parser.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Set;
import java.util.regex.Pattern;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.azure.digitaltwins.parser.ContextHistory;
import com.azure.digitaltwins.parser.VersionedContext;
import com.azure.digitaltwins.parser.Dtmi;
import com.azure.digitaltwins.parser.TypeChecker;
import com.azure.digitaltwins.parser.PropertyValueConstrainer;
import com.azure.digitaltwins.parser.PropertyInstanceBinder;
import com.azure.digitaltwins.parser.ValueConstraints;

/**
 * Class {@link DTUnitInfo} corresponds to an element of type Unit in a DTDL model.
 */
public class DTUnitInfo extends DTEntityInfo implements TypeChecker {
    private static final Map<Integer, String> BAD_TYPE_ACTION_FORMAT = new HashMap<>();

    private static final Map<Integer, String> BAD_TYPE_CAUSE_FORMAT = new HashMap<>();

    private static final Map<Integer, Set<DTEntityKind>> CONCRETE_KINDS = new HashMap<>();

    private static final HashSet<String> VERSION_LESS_TYPES = new HashSet<>();

    private String symbol;

    static {
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Entity");
        VERSION_LESS_TYPES.add("dtmi:dtdl:class:Unit");

        CONCRETE_KINDS.put(2, new HashSet<>());

        CONCRETE_KINDS.put(3, new HashSet<>());

        BAD_TYPE_ACTION_FORMAT.put(2, "Choose a value for property '{property}' whose type is a subtype of Unit.");
        BAD_TYPE_ACTION_FORMAT.put(3, "Choose a value for property '{property}' whose type is a subtype of Unit.");

        BAD_TYPE_CAUSE_FORMAT.put(2, "{primaryId:p} property '{property}' has value{secondaryId:e} that is not a standard value for this property.");
        BAD_TYPE_CAUSE_FORMAT.put(3, "{primaryId:p} property '{property}' has value{secondaryId:e} that is not a standard value for this property.");
    }

    /**
     * Get The value of the 'symbol' property of the DTDL element that corresponds to this object.
     * @return symbol.
     */
    public String getSymbol() {
        return this.symbol;
    }

    /**
     * Set The value of the 'symbol' property of the DTDL element that corresponds to this object.
     * @param value Property value.
     */
    void setSymbol(String value) {
        this.symbol = value;
    }
}
