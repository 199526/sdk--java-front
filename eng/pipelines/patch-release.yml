parameters:
  - name: ServiceDirectory
    type: string
  - name: ArtifactName
    type: string
  - name: ReleaseVersion
    type: string
  - name: PatchVersion
    type: string
    default: ''
  - name: BranchName
    type: string
    default: ''

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - eng/pipelines/patch-release.yml

jobs:
  - job: Patching
    displayName: Generate patch (with build)
    timeoutInMinutes: 180
    variables:
      - template: /eng/pipelines/templates/variables/globals.yml
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - template: /eng/pipelines/templates/steps/cache-maven-repository.yml
      parameters:
        JobType: 'Patching'
        SDKType: 'client'
        ServiceDirectory: 'patch-release'

    - pwsh: |
        $(Build.SourcesDirectory)/eng/scripts/Generate-Patch.ps1
      displayName: Generate Patch Releases

    - template: /eng/common/pipelines/templates/steps/create-pull-request.yml
      parameters:
        PRBranchName: increment-package-version-${{ parameters.ServiceDirectory }}-$(Build.BuildId)
        CommitMsg: "Increment package version after release of ${{ artifact.groupId }} ${{ artifact.name }}"
        PRTitle: "Increment version for ${{ parameters.ServiceDirectory }} releases"
        PRLabels: "auto-merge"
        CloseAfterOpenForTesting: '${{ parameters.TestPipeline }}'

  - job: Compliance
    displayName: Analyze (no build)
    timeoutInMinutes: 120
    variables:
      - template: /eng/pipelines/templates/variables/globals.yml
    pool:
      # CredScan build task is Windows only (https://aka.ms/credscan).
      vmImage: 'windows-2019'
    steps:
    - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
      # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
      # builds should be sufficient.
      # Only run if building all libraries succeeded.
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
      displayName: 'Component Detection'

    # Put cred scan step before install and build packages to avoid the tool scans generated folder like /target.
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
      displayName: 'Run CredScan'
      inputs:
        suppressionsFile: 'eng\CredScanSuppression.json'
      condition: succeededOrFailed()
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
      displayName: 'Post Analysis'
      inputs:
        GdnBreakAllTools: false
        GdnBreakGdnToolCredScan: true
        GdnBreakGdnToolCredScanSeverity: Error
        GdnBreakBaselineFiles: $(Build.SourcesDirectory)\eng\java.gdnbaselines
        GdnBreakBaselines: baseline
        # Used for generating baseline file.
        # GdnBreakOutputBaselineFile: java
        # GdnBreakOutputBaseline: baseline
      condition: succeededOrFailed()
      continueOnError: true
    - pwsh: |
        $results = (Get-Content "$(Pipeline.workspace)\.gdn\.r\CredScan\001\CredScan-matches.sarif" | ConvertFrom-Json).runs.results
        $csvRows = @()
        $pathMatchRegex = ("$(Build.SourcesDirectory)" -replace "\\", "/")
        $results | ForEach-Object {
          $csvRows += [pscustomobject]@{
            ruleId = $_.ruleId
            ruleIndex = $_.ruleIndex
            fingerprints = $_.fingerprints
            message = $_.message
            properties = $_.properties
            rank = $_.rank
            fileName = $_.analysisTarget.uri -replace ".*$pathMatchRegex(.*)", "https://github.com/Azure/azure-sdk-for-java/blob/main/`$1"
            startLine = $_.locations.physicalLocation.region.startLine
            startColumn = $_.locations.physicalLocation.region.startColumn
            endLine = $_.locations.physicalLocation.region.endLine
            endColumn = $_.locations.physicalLocation.region.endColumn
            level = $_.level
          }
        }
        $csvRows | Export-Csv -Path "$(Pipeline.workspace)\.gdn\.r\CredScan\001\CredScan-matches.csv" -NoTypeInformation
      displayName: Add converted csv file for CredScan-matches.sarif
    - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
      displayName: 'Publish Security Analysis Logs'
      condition: succeededOrFailed()
    # Run link verification at the end as it will run no matter the pipeline passing or failing.
    # If this task fails with an error it shouldn't prevent aggregate reports from being generated.
    - template: /eng/common/pipelines/templates/steps/verify-links.yml
      parameters:
        Directory: ""
        CheckLinkGuidance: $true
        Condition: succeededOrFailed()
